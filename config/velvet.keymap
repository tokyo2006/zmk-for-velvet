/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define SCROLLER 1
#define MOUSE 4

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
};

&sk {
    release-after-ms = <2000>;
    quick-release;
};

/ {
    combos {
        compatible = "zmk,combos";

        left_bkt {
            bindings = <&kp LBKT>;
            key-positions = <3 4>;
            timeout-ms = <50>;
        };

        right_bkt {
            bindings = <&kp RBKT>;
            key-positions = <7 8>;
            timeout-ms = <50>;
        };

        left_par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <15 16>;
            timeout-ms = <50>;
        };

        right_par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <19 20>;
            timeout-ms = <50>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <27 28>;
            timeout-ms = <50>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <32 33>;
            timeout-ms = <50>;
        };

        bac {
            bindings = <&kp BACKSLASH>;
            key-positions = <5 6>;
            timeout-ms = <50>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <17 18>;
            timeout-ms = <50>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
            timeout-ms = <50>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <6 7>;
            timeout-ms = <50>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <18 19>;
            timeout-ms = <50>;
        };

        flash {
            bindings = <&bootloader>;
            key-positions = <10 11>;
            layers = <5>;
        };
    };

    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <180>;
            require-prior-idle-ms = <125>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <21 22 19 20>;
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
            bindings = <&mo>, <&kp>;

            quick-tap-ms = <180>;
        };

        as: as {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <135>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            hold-trigger-key-positions = <15 16 14 13>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Qwery {
            bindings = <
&as TILDE GRAVE  &kp Q                &kp W               &kp E            &kp R              &kp T       &kp Y         &kp U               &kp I                &kp O                    &kp P                &as PLUS EQUAL
&kp CAPSLOCK     &hml LEFT_CONTROL A  &hml LEFT_ALT S     &hml LEFT_GUI D  &hml LEFT_SHIFT F  &kp G       &kp H         &hmr RIGHT_SHIFT J  &hmr RCTRL K         &hmr RIGHT_ALT L         &as COLON SEMICOLON  &as DOUBLE_QUOTES SINGLE_QUOTE
&kp LEFT_SHIFT   &kp Z                &kp X               &kp C            &kp V              &kp B       &kp N         &kp M               &as LESS_THAN COMMA  &as GREATER_THAN PERIOD  &as QUESTION SLASH   &kp ENTER
                 &ltq 2 SPACE         &kp LA(LC(DELETE))  &kp NUMBER_3     &ltq 1 BACKSPACE   &ltq 3 TAB  &ltq 3 ENTER  &ltq 4 DELETE       &kp N0               &kp LG(L)                &ltq 2 SPACE
            >;

            label = "Qwery";
        };

        Navi {
            bindings = <
&trans  &trans        &trans        &kp HOME          &kp PAGE_UP     &kp C_VOLUME_UP    &kp C_BRIGHTNESS_INC  &trans    &kp UP_ARROW    &trans           &trans  &trans
&trans  &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &kp C_VOLUME_DOWN  &kp C_BRIGHTNESS_DEC  &kp LEFT  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans  &trans
&trans  &trans        &trans        &kp END           &kp PAGE_DOWN   &kp K_MUTE         &trans                &trans    &trans          &trans           &trans  &trans
        &trans        &trans        &trans            &trans          &trans             &trans                &trans    &trans          &trans           &trans
            >;

            label = "Navi";
        };

        Symbol {
            bindings = <
&trans  &kp EXCLAMATION  &kp AT_SIGN   &kp HASH  &kp DOLLAR  &kp PERCENT  &kp CARET  &kp AMPERSAND    &kp STAR                        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &kp ESCAPE       &kp CAPSLOCK  &kp HOME  &kp END     &kp UNDER    &kp MINUS  &kp RIGHT_SHIFT  &kp PAGE_UP                     &kp PAGE_DOWN         &kp INSERT             &trans
&trans  &kp BACKSPACE    &trans        &trans    &trans      &kp TILDE    &kp GRAVE  &as PLUS EQUAL   &as DOUBLE_QUOTES SINGLE_QUOTE  &as PIPE BACKSLASH    &kp DEL                &trans
        &trans           &trans        &trans    &trans      &trans       &trans     &trans           &trans                          &trans                &trans
            >;

            label = "Symbol";
        };

        Modify {
            bindings = <
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5      &kp NUMBER_6       &kp NUMBER_7    &kp NUMBER_8      &kp NUMBER_9  &kp NUMBER_0  &trans
&trans  &kp LC(A)     &kp LC(S)     &kp LC(D)     &kp LC(F)     &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_GUI  &trans
&trans  &kp LC(Z)     &kp LC(X)     &kp LC(C)     &kp LC(V)     &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp F1          &kp F2            &kp F3        &kp F4        &trans
        &trans        &trans        &trans        &trans        &trans            &trans             &trans          &trans            &trans        &trans
            >;

            label = "Modify";
        };

        Mouse {
            bindings = <
&trans  &trans     &msc SCRL_UP    &mmv MOVE_UP    &msc SCRL_DOWN   &trans     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans          &trans          &trans           &trans     &trans  &trans  &trans  &trans  &trans  &trans
        &mkp LCLK  &trans          &trans          &mkp MCLK        &mkp RCLK  &trans  &trans  &trans  &trans  &trans
            >;

            label = "Mouse";
        };

        Flash {
            bindings = <
&trans &trans      &trans        &kp UP    &trans     &trans             &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans
&trans                  &bt BT_NXT  &kp LEFT      &kp DOWN  &kp RIGHT  &kp C_VOLUME_UP    &kp C_BRI_UP  &bt BT_CLR    &trans        &trans        &trans        &trans
&trans                  &bt BT_PRV  &out OUT_TOG  &trans    &trans     &kp C_VOLUME_DOWN  &kp C_BRI_DN  &trans        &trans        &trans        &trans        &trans
                        &trans      &trans        &trans    &trans     &trans             &trans        &trans        &trans        &trans        &trans
            >;

            label = "Flash";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Flash {
            if-layers = <2 3>;
            then-layer = <5>;
        };
    };
};